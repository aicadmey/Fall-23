# -*- coding: utf-8 -*-
"""DL_LSTM

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ExRZohEs4iDB6Qkk7iWzJnLq6pQ80sGH
"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from sklearn.model_selection import train_test_split
import numpy as np
texts = ["This is a positive sentence.", "Negative sentiment here.", "Another positive example.", "Not a positive statement."]
labels = [1, 0, 1, 0]  # 1 for positive, 0 for negative

# Tokenize the text data
tokenizer = Tokenizer()
tokenizer.fit_on_texts(texts)
total_words = len(tokenizer.word_index) + 1

# Convert text to sequences
sequences = tokenizer.texts_to_sequences(texts)

# Pad sequences to ensure consistent length
padded_sequences = pad_sequences(sequences)

# Convert lists to numpy arrays
X = np.array(padded_sequences)
y = np.array(labels)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build the LSTM model
model = Sequential()
model.add(Embedding(input_dim=total_words, output_dim=16, input_length=X.shape[1]))
model.add(LSTM(100))
model.add(Dense(1, activation='sigmoid'))

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Display the model summary
model.summary()

# Train the model
model.fit(X_train, y_train, epochs=5, validation_data=(X_test, y_test))

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Accuracy: {accuracy * 100:.2f}%")

from tensorflow.keras.utils import plot_model

# ... (your previous code)

# Save the model architecture to a file
plot_model(model, to_file='lstm_model.png', show_shapes=True, show_layer_names=True)

